library(coverager)
library(coverager)
get.total.coverage <- function(locations,lon,lat,distance) {
output <- data.frame(locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
locations,
c (lon,lat)
) / 1000 < distance)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
result$coverage_percentage <- c(round(result[2] / nrow(locations) * 100,2))   # Calculate the percentage of locations within range of the point of interest.
result$covered_locations <- result[2]                                                 # Calculate the total number of locations that are within range of the point of interest.
result$total_locations <- nrow(locations)                                             # The total number of locations in the data set.
result <- tibble(result$coverage_percentage,                                          # Create a tibble of results.
result$covered_locations,
result$total_locations)
names(result) <- c("Coverage %",                                                      # Rename the columns.
"Count of Locations Covered",
"Total Locations")
return(result)                                                                        # Prints the output when function is called.
}
library(readr)
Bus_Stop_Shelter <- read_csv("~/Documents/GitHub/New-York-Bus-Tourism-Coverage/data/Bus_Stop_Shelter.csv")
View(Bus_Stop_Shelter)
library(readr)
Hotels_Properties_Citywide <- read_csv("~/Documents/GitHub/New-York-Bus-Tourism-Coverage/data/Hotels_Properties_Citywide.csv")
View(Hotels_Properties_Citywide)
hotel <- Hotels_Properties_Citywide
stop <- Bus_Stop_Shelter
stop_data <- as.data.frame(stop %>% select(LONGITUDE, LATITUDE))
stop_locations <- stop %>% select(Street, LONGITUDE, LATITUDE)
hotel_locations <- hotel %>% select(Longitude, Latitude)
library(dplyr)
stop <- Bus_Stop_Shelter
hotel <- Hotels_Properties_Citywide
stop_data <- as.data.frame(stop %>% select(LONGITUDE, LATITUDE))
stop_locations <- stop %>% select(Street, LONGITUDE, LATITUDE)
hotel_locations <- hotel %>% select(Longitude, Latitude)
get.total.coverage(hotel_locations,-74.02284, 40.62925,30)
library(geosphere)
get.total.coverage(hotel_locations,-74.02284, 40.62925,30)
get.total.coverage(hotel_locations,-74.02284, 40.62925,50)
result$true
get.total.coverage <- function(locations,lon,lat,distance) {
output <- data.frame(locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
locations,
c (lon,lat)
) / 1000 < distance)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
result$coverage_percentage <- c(round(result$TRUE / nrow(locations) * 100,2))   # Calculate the percentage of locations within range of the point of interest.
result$covered_locations <- result$TRUE                                               # Calculate the total number of locations that are within range of the point of interest.
result$total_locations <- nrow(locations)                                             # The total number of locations in the data set.
result <- tibble(result$coverage_percentage,                                          # Create a tibble of results.
result$covered_locations,
result$total_locations)
names(result) <- c("Coverage %",                                                      # Rename the columns.
"Count of Locations Covered",
"Total Locations")
return(result)                                                                        # Prints the output when function is called.
}
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < distance)                    # Convert the distance to Kilometers.
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 20)                    # Convert the distance to Kilometers.
output
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
result
result$TRUE
str(result)
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 20)                    # Convert the distance to Kilometers.
result <- as.data.frame(output$coverage)                                                      # Extract the coverage results from the output.
result
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
result
TRUE %in% result
result == TRUE
result[2] == TRUE
result[2] > 0
test <- if (result[2] > 0) {  c(round(result[2] / nrow(locations) * 100,2))  } else 0
test <- if (result[2] > 0) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else 0
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 60)                    # Convert the distance to Kilometers.
test <- if (result[2] > 0) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else 0
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 1000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (result[2] > 0) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else 0
length(result)
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else 0
test
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 5000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 100000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 10000000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 10000000000000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
result
nrow(hotel_locations)
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 1000000000000000000000)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {  c(round(result[2] / nrow(hotel_locations) * 100,2))  } else c(round(result[1] / nrow(hotel_locations) * 100,2))
test
test <- if (length(result) == 2) {
result[2]
} else result[1]
test
output <- data.frame(hotel_locations,                                                       #Calculate the distance of the point of interest for each row in locations data frame.
coverage = distHaversine(
hotel_locations,
c (-74.02284,40.62925
)
) / 1000 < 1)                    # Convert the distance to Kilometers.
result <- table(output$coverage)                                                      # Extract the coverage results from the output.
test <- if (length(result) == 2) {
result[2]
} else result[1]
test
library(coverager)
library(coverager)
library(coverager)
library(coverager)
